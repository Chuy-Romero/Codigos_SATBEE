#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>          /*estas libreriasse utilizan para la comunicacion por modulo nrf24l01*/
#include <Wire.h>          /*libreria para conexion or I2C*/
#include <Adafruit_BMP085.h>   /*libreria del barometro*/
#include "I2Cdev.h"
#include "MPU6050.h" /*libreria del giroscopio*/
#include "Wire.h"

Adafruit_BMP085 bmp;       
const int bmpAdress = 0x77;     /*declaracion de la direccion I2C del barometro*/

const int mpuAddress = 0x68;         /*direccion I2C del acelerometro/giroscopio*/
MPU6050 mpu(mpuAddress);
const float accScale = 2.0 * 9.81 / 32768.0;        /*cnstante spara la conversion a unidades del mks*/
const float gyroScale = 250.0 / 32768.0;
int ax, ay, az;           /*variables donde alamcenasmos la aclwracion lineal y angular*/
int gx, gy, gz;


const int pinCE = 9;                  /*pines de uso dle modulo de readiocomunicacion*/
const int pinCSN = 10;
RF24 radio (pinCE, pinCSN);
const uint64_t pipe = 0xE8E8F0F0E1LL;       /*direccion de enlace de las antenas*/

float T,P,A,Ax,Ay,Az,Gx,Gy,Gz;         /*variables donde se almacenan los datos recabados y que se enviaran*/
float data[9];                         /*arreglo que almacenas las variables anteriores*/

void setup() { 
  Serial.begin(9600);                  /*iniciamos comunicacion serial a 9600 boudios*/
  if (!bmp.begin()) {                  /*inciamos el barometro*/
    Serial.println("Could not find a valid BMP085 sensor, check wiring!");
    while (1) {}
  }
  radio.begin();                      /*inciamos el modulo de las antenas*/
  radio.openWritingPipe(pipe);        /*lo iniciamos como emisor*/
  Serial.begin(9600);
  Wire.begin();                       /*iniciamos comunicacion por bus I2C*/
  mpu.initialize();                   /*iciamos el aceleroemtro/giroscopio*/
  Serial.println(mpu.testConnection() ? F("IMU iniciado correctamente") : F("Error al iniciar IMU"));
}

void loop() {
  Wire.beginTransmission(bmpAdress);   /*iniciamos comunicacion por I2C con el barometro*/
  T = bmp.readTemperature();           /*obtenemos presion, altitud,temperatura*/
  P = bmp.readPressure();
  A = bmp.readAltitude();
  Wire.endTransmission();             /*finalizamos la comunicacion*/
  Wire.beginTransmission(mpuAddress); /*iniciamos comunicacion I2C con el acelereometro*/
  mpu.getAcceleration(&ax, &ay, &az); /*obtenemos aceleraciones lineales y angulares en cada eje*/
  mpu.getRotation(&gx, &gy, &gz);
  Ax = ax*accScale;                   /*las tranformamos a unidades el mks*/
  Ay = ay*accScale;
  Az = az*accScale;
  Gx = gx*gyroScale;
  Gy = gy*gyroScale;
  Gz = gz*gyroScale;
  Wire.endTransmission();            /*finalizamos comunicacion*/ 
  data[0] = T;                       /*rellenamos el arreglo dtaa con los valores recabados en los procesos anteriores*/
  data[1] = P;
  data[2] = A;
  data[3] = Ax;
  data[4] = Ay;
  data[5] = Az;
  data[6] = Gx;
  data[7] = Gy;
  data[8] = Gz;
  radio.write(data, sizeof data);  /*hacemos el envio de datos*/
  delay(1000);                     /*lo hacemos en ciclos que se repiten cada 1 segundo*/
}
